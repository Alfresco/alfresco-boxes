# Alfresco Vagrant Web Box
#
# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'json/merge_patch'

params = {}
boxAttributes = ""

params['downloadCmd'] = ENV['DOWNLOAD_CMD'] || "curl --silent"
params['workDir'] = ENV['WORK_DIR'] || "./.vagrant"

params['boxUrl'] = ENV['BOX_URL'] || "http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_centos-7.1_chef-provisionerless.box"
params['boxName'] = ENV['BOX_NAME'] || "opscode-centos-7.1"

params['nodesUrl'] = ENV['NODES_URL'] || "file://#{ENV['PWD']}/nodes-allinone-community.json"
params['cookbooksUrl'] = ENV['COOKBOOKS_URL'] || "https://artifacts.alfresco.com/nexus/service/local/repositories/releases/content/org/alfresco/devops/chef-alfresco/0.6.7/chef-alfresco-0.6.7.tar.gz"
params['dataBagsUrl'] = ENV['DATABAGS_URL'] || ''

def printVars(params)
  print "#START - Printing out Vagrant environment variables:\n"
  params.each do |paramName,paramValue|
    print "#{paramName}: '"+paramValue+"'\n"
  end
  print "#END - Printing out Vagrant environment variables:\n"
end

def reloadChefItems(nodes,params)
  # Make sure the work directory exists
  `mkdir -p #{params['workDir']}`

  # TODO - check if already installed first and/or add it to docs
  # `vagrant plugin install json-merge_patch`

  # Download and uncompress Chef cookbooks (in a Berkshelf package format)
  if params['cookbooksUrl'] and params['cookbooksUrl'].length != 0
    `#{params['downloadCmd']} #{params['cookbooksUrl']} > #{params['workDir']}/cookbooks.tar.gz`
    print "Downloaded #{params['cookbooksUrl']}\n"
    `tar xzf #{params['workDir']}/cookbooks.tar.gz -C #{params['workDir']}`
    print "Unpacked #{params['workDir']}/cookbooks.tar.gz into #{params['workDir']}\n"
  end

  # Download and uncompress Chef databags
  if params['dataBagsUrl'] and params['dataBagsUrl'].length != 0
    `#{params['downloadCmd']} #{params['dataBagsUrl']} > #{params['workDir']}/databags.tar.gz`
    print "Downloaded #{params['dataBagsUrl']}\n"
    `tar xzf #{params['workDir']}/databags.tar.gz -C #{params['workDir']}`
    print "Unpacked #{params['workDir']}/databags.tar.gz into #{params['workDir']}\n"
  end

  # Download node URL
  nodes.each do |chefNodeName,chefNode|
    print "Processing node '#{chefNodeName}'\n"
    `#{params['downloadCmd']} #{chefNode['url']} > #{params['workDir']}/attributes-#{chefNodeName}.json.original`
    print "Downloaded #{chefNode['url']} into #{params['workDir']}/attributes-#{chefNodeName}.json.original\n"

    print "initVars: #{chefNode['initVars'].to_json}\n"

    # Patch node URL with initVars
    mergedAttributes = JSON.merge(File.open("#{params['workDir']}/attributes-#{chefNodeName}.json.original").read, chefNode['initVars'].to_json)

    File.open("#{params['workDir']}/attributes-#{chefNodeName}.json", 'w').write(mergedAttributes)

    print "Merged #{params['workDir']}/attributes-#{chefNodeName}.json.original and #{params['workDir']}/initvars.json into #{params['workDir']}/attributes-#{chefNodeName}.json\n"

    # For debugging purposes
    # print("mergedAttributes:\n#{mergedAttributes}\n")
  end
end

# Download nodes URL
`#{params['downloadCmd']} #{params['nodesUrl']} > #{params['workDir']}/nodes.json`
print "Downloaded #{params['nodesUrl']} into #{params['workDir']}/nodes.json\n"

# Load nodes JSON
nodes = JSON.parse(File.open("#{params['workDir']}/nodes.json").read)
reloadChefItems(nodes, params)

Vagrant.configure("2") do |config|

  # TODO - this stopped working when added json-merge_patch
  #
  # config.trigger.before :provision do
  #   reloadChefItems(params)
  # end
  #
  # config.trigger.before :up do
  #   reloadChefItems(params)
  # end

  # TODO - make pretty printing work
  #
  # boxAttributesContent = JSON.pretty_generate(reloadChefItems(params))
  nodes.each do |chefNodeName,chefNode|
    config.vm.define chefNodeName do |machineConfig|
      boxAttributesContent = File.open("#{params['workDir']}/attributes-#{chefNodeName}.json").read
      # boxAttributes = JSON.pretty_generate(JSON.parse(boxAttributesContent))
      boxAttributes = JSON.parse(boxAttributesContent)
      # For debugging purposes
      # print("boxAttributes:\n#{boxAttributes}\n")

      if ENV['NEXUS_USERNAME'] and ENV['NEXUS_PASSWORD']
        boxAttributes['artifact-deployer'] = {}
        boxAttributes['artifact-deployer']['maven'] = {}
        boxAttributes['artifact-deployer']['maven']['repositories'] = {}
        boxAttributes['artifact-deployer']['maven']['repositories']['private'] = {}

        boxAttributes['artifact-deployer']['maven']['repositories']['private']['url'] = "https://artifacts.alfresco.com/nexus/content/groups/private"
        boxAttributes['artifact-deployer']['maven']['repositories']['private']['username'] = ENV['NEXUS_USERNAME']
        boxAttributes['artifact-deployer']['maven']['repositories']['private']['password'] = ENV['NEXUS_PASSWORD']
      end

      boxIp = boxAttributes["ip"] || "127.0.0.1"
      boxHostname = boxAttributes["hostname"] || boxAttributes["name"]
      boxRunList = boxAttributes["run_list"]

      # Box env configuration
      # TODO - this will be needed for clustering
      # config.vm.network :private_network, ip:  boxIp
      machineConfig.vm.hostname = boxHostname
      machineConfig.vm.provider :virtualbox do |vb,override|
        override.vm.box_url = params['vagrantBoxUrl']
        override.vm.box = params['boxName']
        vb.customize ["modifyvm", :id, "--memory", chefNode['memory']]
        vb.customize ["modifyvm", :id, "--cpus", chefNode['cpus']]
      end

      # Use the latest Chef version
      # config.omnibus.chef_version = "12.5.1"

      # Chef run configuration
      machineConfig.vm.provision :chef_solo do |chef|
        chef.cookbooks_path = "#{params['workDir']}/cookbooks"
        chef.data_bags_path = "#{params['workDir']}/data_bags"

        boxRunList.each do |recipe|
          chef.add_recipe "recipe[#{recipe}]"
        end

        chef.json = boxAttributes
      end
    end
  end
end
